"use strict";(self.webpackChunkdocs_rnc=self.webpackChunkdocs_rnc||[]).push([[962],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return m}});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var d=a.createContext({}),s=function(e){var n=a.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},c=function(e){var n=s(e.components);return a.createElement(d.Provider,{value:n},e.children)},h={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,d=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=s(t),m=r,p=u["".concat(d,".").concat(m)]||u[m]||h[m]||o;return t?a.createElement(p,l(l({ref:n},c),{},{components:t})):a.createElement(p,l({ref:n},c))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,l=new Array(o);l[0]=u;var i={};for(var d in n)hasOwnProperty.call(n,d)&&(i[d]=n[d]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var s=2;s<o;s++)l[s]=t[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},9143:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return i},contentTitle:function(){return d},metadata:function(){return s},toc:function(){return c},default:function(){return u}});var a=t(7462),r=t(3366),o=(t(7294),t(3905)),l=["components"],i={},d=void 0,s={unversionedId:"Components/Agenda",id:"Components/Agenda",title:"Agenda",description:"Agenda component",source:"@site/docs/Components/Agenda.md",sourceDirName:"Components",slug:"/Components/Agenda",permalink:"/react-native-calendars/docs/Components/Agenda",editUrl:"https://github.com/wix/react-native-calendars/tree/master/docsRNC/docs/Components/Agenda.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Testing",permalink:"/react-native-calendars/docs/Testing"},next:{title:"AgendaList",permalink:"/react-native-calendars/docs/Components/AgendaList"}},c=[{value:"API",id:"api",children:[{value:"items",id:"items",children:[],level:3},{value:"loadItemsForMonth",id:"loaditemsformonth",children:[],level:3},{value:"onDayChange",id:"ondaychange",children:[],level:3},{value:"onCalendarToggled",id:"oncalendartoggled",children:[],level:3},{value:"selected",id:"selected",children:[],level:3},{value:"renderKnob",id:"renderknob",children:[],level:3},{value:"hideKnob",id:"hideknob",children:[],level:3},{value:"showClosingKnob",id:"showclosingknob",children:[],level:3},{value:"showOnlySelectedDayItems",id:"showonlyselecteddayitems",children:[],level:3},{value:"renderEmptyData",id:"renderemptydata",children:[],level:3}],level:2},{value:"Agenda Examples",id:"agenda-examples",children:[],level:2}],h={toc:c};function u(e){var n=e.components,t=(0,r.Z)(e,l);return(0,o.kt)("wrapper",(0,a.Z)({},h,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Agenda component",(0,o.kt)("br",{parentName:"p"}),"\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/wix/react-native-calendars/blob/master/example/src/screens/agendaScreen.tsx"},"(code example)")),(0,o.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"This component extends ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"https://github.com/wix/react-native-calendars/blob/master/src/calendar-list/index.tsx"},"CalendarList"),", ",(0,o.kt)("a",{parentName:"strong",href:"https://reactnative.dev/docs/flatlist"},"FlatList"))," props."))),(0,o.kt)("div",{style:{display:"flex",flexDirection:"row",overflowX:"auto",maxHeight:"500px",alignItems:"center"}},(0,o.kt)("img",{style:{maxHeight:"420px"},src:"https://github.com/wix/react-native-calendars/blob/master/demo/assets/agenda.gif?raw=true"})),(0,o.kt)("h2",{id:"api"},"API"),(0,o.kt)("h3",{id:"items"},"items"),(0,o.kt)("p",null,"the list of items that have to be displayed in agenda. If you want to render item as empty date the value of date key has to be an empty array []. If there exists no value for date key it is considered that the date in question is not yet loaded  "),(0,o.kt)("span",{style:{color:"grey"}},"AgendaSchedule"),(0,o.kt)("h3",{id:"loaditemsformonth"},"loadItemsForMonth"),(0,o.kt)("p",null,"Handler which gets executed when items for a certain month should be loaded (month became visible)  "),(0,o.kt)("span",{style:{color:"grey"}},"(data: DateData) => void"),(0,o.kt)("h3",{id:"ondaychange"},"onDayChange"),(0,o.kt)("p",null,"Handler which gets executed when day changes while scrolling agenda list  "),(0,o.kt)("span",{style:{color:"grey"}},"(data: DateData) => void"),(0,o.kt)("h3",{id:"oncalendartoggled"},"onCalendarToggled"),(0,o.kt)("p",null,"Handler which gets executed when the calendar is opened or closed  "),(0,o.kt)("span",{style:{color:"grey"}},"(enabled: boolean) => void"),(0,o.kt)("h3",{id:"selected"},"selected"),(0,o.kt)("p",null,"initially selected day  "),(0,o.kt)("span",{style:{color:"grey"}},"string"),(0,o.kt)("h3",{id:"renderknob"},"renderKnob"),(0,o.kt)("p",null,"Replace default agenda's knob with a custom one  "),(0,o.kt)("span",{style:{color:"grey"}},"() => JSX.Element"),(0,o.kt)("h3",{id:"hideknob"},"hideKnob"),(0,o.kt)("p",null,"Whether to hide the knob  "),(0,o.kt)("span",{style:{color:"grey"}},"boolean"),(0,o.kt)("h3",{id:"showclosingknob"},"showClosingKnob"),(0,o.kt)("p",null,"Whether the knob should always be visible (when hideKnob = false)  "),(0,o.kt)("span",{style:{color:"grey"}},"boolean"),(0,o.kt)("h3",{id:"showonlyselecteddayitems"},"showOnlySelectedDayItems"),(0,o.kt)("p",null,"Whether to show items only for the selected date  "),(0,o.kt)("span",{style:{color:"grey"}},"boolean"),(0,o.kt)("h3",{id:"renderemptydata"},"renderEmptyData"),(0,o.kt)("p",null,"Replace default ActivityIndicator with a custom one  "),(0,o.kt)("span",{style:{color:"grey"}},"() => JSX.Element"),(0,o.kt)("br",null),(0,o.kt)("h2",{id:"agenda-examples"},"Agenda Examples"),(0,o.kt)("br",null),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"<Agenda\n  // The list of items that have to be displayed in agenda. If you want to render item as empty date\n  // the value of date key has to be an empty array []. If there exists no value for date key it is\n  // considered that the date in question is not yet loaded\n  items={{\n    '2012-05-22': [{name: 'item 1 - any js object'}],\n    '2012-05-23': [{name: 'item 2 - any js object', height: 80}],\n    '2012-05-24': [],\n    '2012-05-25': [{name: 'item 3 - any js object'}, {name: 'any js object'}]\n  }}\n  // Callback that gets called when items for a certain month should be loaded (month became visible)\n  loadItemsForMonth={month => {\n    console.log('trigger items loading');\n  }}\n  // Callback that fires when the calendar is opened or closed\n  onCalendarToggled={calendarOpened => {\n    console.log(calendarOpened);\n  }}\n  // Callback that gets called on day press\n  onDayPress={day => {\n    console.log('day pressed');\n  }}\n  // Callback that gets called when day changes while scrolling agenda list\n  onDayChange={day => {\n    console.log('day changed');\n  }}\n  // Initially selected day\n  selected={'2012-05-16'}\n  // Minimum date that can be selected, dates before minDate will be grayed out. Default = undefined\n  minDate={'2012-05-10'}\n  // Maximum date that can be selected, dates after maxDate will be grayed out. Default = undefined\n  maxDate={'2012-05-30'}\n  // Max amount of months allowed to scroll to the past. Default = 50\n  pastScrollRange={50}\n  // Max amount of months allowed to scroll to the future. Default = 50\n  futureScrollRange={50}\n  // Specify how each item should be rendered in agenda\n  renderItem={(item, firstItemInDay) => {\n    return <View />;\n  }}\n  // Specify how each date should be rendered. day can be undefined if the item is not first in that day\n  renderDay={(day, item) => {\n    return <View />;\n  }}\n  // Specify how empty date content with no items should be rendered\n  renderEmptyDate={() => {\n    return <View />;\n  }}\n  // Specify how agenda knob should look like\n  renderKnob={() => {\n    return <View />;\n  }}\n  // Override inner list with a custom implemented component\n  renderList={listProps => {\n    return <MyCustomList {...listProps} />;\n  }}\n  // Specify what should be rendered instead of ActivityIndicator\n  renderEmptyData={() => {\n    return <View />;\n  }}\n  // Specify your item comparison function for increased performance\n  rowHasChanged={(r1, r2) => {\n    return r1.text !== r2.text;\n  }}\n  // Hide knob button. Default = false\n  hideKnob={true}\n  // When `true` and `hideKnob` prop is `false`, the knob will always be visible and the user will be able to drag the knob up and close the calendar. Default = false\n  showClosingKnob={false}\n  // By default, agenda dates are marked if they have at least one item, but you can override this if needed\n  markedDates={{\n    '2012-05-16': {selected: true, marked: true},\n    '2012-05-17': {marked: true},\n    '2012-05-18': {disabled: true}\n  }}\n  // If disabledByDefault={true} dates flagged as not disabled will be enabled. Default = false\n  disabledByDefault={true}\n  // If provided, a standard RefreshControl will be added for \"Pull to Refresh\" functionality. Make sure to also set the refreshing prop correctly\n  onRefresh={() => console.log('refreshing...')}\n  // Set this true while waiting for new data from a refresh\n  refreshing={false}\n  // Add a custom RefreshControl component, used to provide pull-to-refresh functionality for the ScrollView\n  refreshControl={null}\n  // Agenda theme\n  theme={{\n    ...calendarTheme,\n    agendaDayTextColor: 'yellow',\n    agendaDayNumColor: 'green',\n    agendaTodayColor: 'red',\n    agendaKnobColor: 'blue'\n  }}\n  // Agenda container style\n  style={{}}\n/>\n")))}u.isMDXComponent=!0}}]);