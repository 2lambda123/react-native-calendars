"use strict";(self.webpackChunkdocs_rnc=self.webpackChunkdocs_rnc||[]).push([[110],{3905:function(e,t,a){a.d(t,{Zo:function(){return c},kt:function(){return m}});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),d=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},c=function(e){var t=d(e.components);return n.createElement(s.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),p=d(a),m=r,u=p["".concat(s,".").concat(m)]||p[m]||h[m]||l;return a?n.createElement(u,o(o({ref:t},c),{},{components:a})):n.createElement(u,o({ref:t},c))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,o=new Array(l);o[0]=p;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var d=2;d<l;d++)o[d]=a[d];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}p.displayName="MDXCreateElement"},820:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return i},contentTitle:function(){return s},metadata:function(){return d},toc:function(){return c},default:function(){return p}});var n=a(7462),r=a(3366),l=(a(7294),a(3905)),o=["components"],i={},s=void 0,d={unversionedId:"Components/Calendar",id:"Components/Calendar",title:"Calendar",description:"Calendar component",source:"@site/docs/Components/Calendar.md",sourceDirName:"Components",slug:"/Components/Calendar",permalink:"/react-native-calendars/docs/Components/Calendar",editUrl:"https://github.com/wix/react-native-calendars/tree/master/docsRNC/docs/Components/Calendar.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"AgendaList",permalink:"/react-native-calendars/docs/Components/AgendaList"},next:{title:"CalendarList",permalink:"/react-native-calendars/docs/Components/CalendarList"}},c=[{value:"API",id:"api",children:[{value:"theme",id:"theme",children:[],level:3},{value:"style",id:"style",children:[],level:3},{value:"headerStyle",id:"headerstyle",children:[],level:3},{value:"customHeader",id:"customheader",children:[],level:3},{value:"initialDate",id:"initialdate",children:[],level:3},{value:"minDate",id:"mindate",children:[],level:3},{value:"maxDate",id:"maxdate",children:[],level:3},{value:"firstDay",id:"firstday",children:[],level:3},{value:"markedDates",id:"markeddates",children:[],level:3},{value:"displayLoadingIndicator",id:"displayloadingindicator",children:[],level:3},{value:"showWeekNumbers",id:"showweeknumbers",children:[],level:3},{value:"hideExtraDays",id:"hideextradays",children:[],level:3},{value:"showSixWeeks",id:"showsixweeks",children:[],level:3},{value:"disableMonthChange",id:"disablemonthchange",children:[],level:3},{value:"enableSwipeMonths",id:"enableswipemonths",children:[],level:3},{value:"disabledByDefault",id:"disabledbydefault",children:[],level:3},{value:"allowSelectionOutOfRange",id:"allowselectionoutofrange",children:[],level:3},{value:"onDayPress",id:"ondaypress",children:[],level:3},{value:"onDayLongPress",id:"ondaylongpress",children:[],level:3},{value:"onMonthChange",id:"onmonthchange",children:[],level:3},{value:"onVisibleMonthsChange",id:"onvisiblemonthschange",children:[],level:3},{value:"monthFormat",id:"monthformat",children:[],level:3},{value:"hideDayNames",id:"hidedaynames",children:[],level:3},{value:"hideArrows",id:"hidearrows",children:[],level:3},{value:"arrowsHitSlop",id:"arrowshitslop",children:[],level:3},{value:"disableArrowLeft",id:"disablearrowleft",children:[],level:3},{value:"disableArrowRight",id:"disablearrowright",children:[],level:3},{value:"renderArrow",id:"renderarrow",children:[],level:3},{value:"onPressArrowLeft",id:"onpressarrowleft",children:[],level:3},{value:"onPressArrowRight",id:"onpressarrowright",children:[],level:3},{value:"disabledDaysIndexes",id:"disableddaysindexes",children:[],level:3},{value:"renderHeader",id:"renderheader",children:[],level:3},{value:"customHeaderTitle",id:"customheadertitle",children:[],level:3},{value:"dayComponent",id:"daycomponent",children:[],level:3},{value:"disableAllTouchEventsForDisabledDays",id:"disablealltoucheventsfordisableddays",children:[],level:3},{value:"disableAllTouchEventsForInactiveDays",id:"disablealltoucheventsforinactivedays",children:[],level:3}],level:2},{value:"Calendar Examples",id:"calendar-examples",children:[{value:"Basic parameters",id:"basic-parameters",children:[],level:4},{value:"Date marking",id:"date-marking",children:[],level:4},{value:"Displaying data loading indicator",id:"displaying-data-loading-indicator",children:[],level:4},{value:"Customizing look &amp; feel",id:"customizing-look--feel",children:[],level:4},{value:"Customize days titles with disabled styling",id:"customize-days-titles-with-disabled-styling",children:[],level:4},{value:"Advanced styling",id:"advanced-styling",children:[],level:4},{value:"Individual day header styling",id:"individual-day-header-styling",children:[],level:4},{value:"Overriding day component",id:"overriding-day-component",children:[],level:4}],level:2}],h={toc:c};function p(e){var t=e.components,a=(0,r.Z)(e,o);return(0,l.kt)("wrapper",(0,n.Z)({},h,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"Calendar component",(0,l.kt)("br",{parentName:"p"}),"\n",(0,l.kt)("a",{parentName:"p",href:"https://github.com/wix/react-native-calendars/blob/master/example/src/screens/calendarScreen.tsx"},"(code example)")),(0,l.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"This component extends ",(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("a",{parentName:"strong",href:"https://github.com/wix/react-native-calendars/blob/master/src/calendar/header/index.tsx"},"CalendarHeader"),", ",(0,l.kt)("a",{parentName:"strong",href:"https://github.com/wix/react-native-calendars/blob/master/src/calendar/day/basic/index.tsx"},"BasicDay"))," props."))),(0,l.kt)("div",{style:{display:"flex",flexDirection:"row",overflowX:"auto",maxHeight:"500px",alignItems:"center"}},(0,l.kt)("img",{style:{maxHeight:"420px"},src:"https://github.com/wix/react-native-calendars/blob/master/demo/assets/calendar.gif?raw=true"})),(0,l.kt)("h2",{id:"api"},"API"),(0,l.kt)("h3",{id:"theme"},"theme"),(0,l.kt)("p",null,"Specify theme properties to override specific styles for calendar parts  "),(0,l.kt)("span",{style:{color:"grey"}},"Theme"),(0,l.kt)("h3",{id:"style"},"style"),(0,l.kt)("p",null,"Specify style for calendar container element  "),(0,l.kt)("span",{style:{color:"grey"}},"ViewStyle"),(0,l.kt)("h3",{id:"headerstyle"},"headerStyle"),(0,l.kt)("p",null,"Specify style for calendar header  "),(0,l.kt)("span",{style:{color:"grey"}},"ViewStyle"),(0,l.kt)("h3",{id:"customheader"},"customHeader"),(0,l.kt)("p",null,"Allow rendering a totally custom header  "),(0,l.kt)("span",{style:{color:"grey"}},"any"),(0,l.kt)("h3",{id:"initialdate"},"initialDate"),(0,l.kt)("p",null,"Initially visible month  "),(0,l.kt)("span",{style:{color:"grey"}},"string"),(0,l.kt)("h3",{id:"mindate"},"minDate"),(0,l.kt)("p",null,"Minimum date that can be selected, dates before minDate will be grayed out  "),(0,l.kt)("span",{style:{color:"grey"}},"string"),(0,l.kt)("h3",{id:"maxdate"},"maxDate"),(0,l.kt)("p",null,"Maximum date that can be selected, dates after maxDate will be grayed out  "),(0,l.kt)("span",{style:{color:"grey"}},"string"),(0,l.kt)("h3",{id:"firstday"},"firstDay"),(0,l.kt)("p",null,"If firstDay=1 week starts from Monday. Note that dayNames and dayNamesShort should still start from Sunday  "),(0,l.kt)("span",{style:{color:"grey"}},"number"),(0,l.kt)("h3",{id:"markeddates"},"markedDates"),(0,l.kt)("p",null,"Collection of dates that have to be marked  "),(0,l.kt)("span",{style:{color:"grey"}},"MarkedDatesType"),(0,l.kt)("h3",{id:"displayloadingindicator"},"displayLoadingIndicator"),(0,l.kt)("p",null,"Whether to display loading indicator  "),(0,l.kt)("span",{style:{color:"grey"}},"boolean"),(0,l.kt)("h3",{id:"showweeknumbers"},"showWeekNumbers"),(0,l.kt)("p",null,"Whether to show weeks numbers  "),(0,l.kt)("span",{style:{color:"grey"}},"boolean"),(0,l.kt)("h3",{id:"hideextradays"},"hideExtraDays"),(0,l.kt)("p",null,"Whether to hide days of other months in the month page  "),(0,l.kt)("span",{style:{color:"grey"}},"boolean"),(0,l.kt)("h3",{id:"showsixweeks"},"showSixWeeks"),(0,l.kt)("p",null,"Whether to always show six weeks on each month (when hideExtraDays = false)  "),(0,l.kt)("span",{style:{color:"grey"}},"boolean"),(0,l.kt)("h3",{id:"disablemonthchange"},"disableMonthChange"),(0,l.kt)("p",null,"Whether to disable changing month when click on days of other months (when hideExtraDays is false)  "),(0,l.kt)("span",{style:{color:"grey"}},"boolean"),(0,l.kt)("h3",{id:"enableswipemonths"},"enableSwipeMonths"),(0,l.kt)("p",null,"Whether to enable the option to swipe between months  "),(0,l.kt)("span",{style:{color:"grey"}},"boolean"),(0,l.kt)("h3",{id:"disabledbydefault"},"disabledByDefault"),(0,l.kt)("p",null,"Whether to disable days by default  "),(0,l.kt)("span",{style:{color:"grey"}},"boolean"),(0,l.kt)("h3",{id:"allowselectionoutofrange"},"allowSelectionOutOfRange"),(0,l.kt)("p",null,"Whether to allow selection of dates before minDate or after maxDate  "),(0,l.kt)("span",{style:{color:"grey"}},"boolean"),(0,l.kt)("h3",{id:"ondaypress"},"onDayPress"),(0,l.kt)("p",null,"Handler which gets executed on day press  "),(0,l.kt)("span",{style:{color:"grey"}},"(date: DateData) => void"),(0,l.kt)("h3",{id:"ondaylongpress"},"onDayLongPress"),(0,l.kt)("p",null,"Handler which gets executed on day long press  "),(0,l.kt)("span",{style:{color:"grey"}},"(date: DateData) => void"),(0,l.kt)("h3",{id:"onmonthchange"},"onMonthChange"),(0,l.kt)("p",null,"Handler which gets executed when month changes in calendar  "),(0,l.kt)("span",{style:{color:"grey"}},"(date: DateData) => void"),(0,l.kt)("h3",{id:"onvisiblemonthschange"},"onVisibleMonthsChange"),(0,l.kt)("p",null,"Handler which gets executed when visible month changes in calendar  "),(0,l.kt)("span",{style:{color:"grey"}},"(months: DateData[]) => void"),(0,l.kt)("h3",{id:"monthformat"},"monthFormat"),(0,l.kt)("p",null,"Month format for the header's title. Formatting values: ",(0,l.kt)("a",{parentName:"p",href:"http://arshaw.com/xdate/#Formatting"},"http://arshaw.com/xdate/#Formatting"),"  "),(0,l.kt)("span",{style:{color:"grey"}},"string"),(0,l.kt)("h3",{id:"hidedaynames"},"hideDayNames"),(0,l.kt)("p",null,"Whether to hide the days names  "),(0,l.kt)("span",{style:{color:"grey"}},"boolean"),(0,l.kt)("h3",{id:"hidearrows"},"hideArrows"),(0,l.kt)("p",null,"Whether to hide the arrows  "),(0,l.kt)("span",{style:{color:"grey"}},"boolean"),(0,l.kt)("h3",{id:"arrowshitslop"},"arrowsHitSlop"),(0,l.kt)("p",null,"Left & Right arrows. Additional distance outside of the buttons in which a press is detected, default: 20"),(0,l.kt)("span",{style:{color:"grey"}},"null | Insets | number"),(0,l.kt)("h3",{id:"disablearrowleft"},"disableArrowLeft"),(0,l.kt)("p",null,"Whether to disable the left arrow  "),(0,l.kt)("span",{style:{color:"grey"}},"boolean"),(0,l.kt)("h3",{id:"disablearrowright"},"disableArrowRight"),(0,l.kt)("p",null,"Whether to disable the right arrow  "),(0,l.kt)("span",{style:{color:"grey"}},"boolean"),(0,l.kt)("h3",{id:"renderarrow"},"renderArrow"),(0,l.kt)("p",null,"Replace default arrows with custom ones (direction: 'left' | 'right')  "),(0,l.kt)("span",{style:{color:"grey"}},"(direction: Direction) => ReactNode"),(0,l.kt)("h3",{id:"onpressarrowleft"},"onPressArrowLeft"),(0,l.kt)("p",null,"Handler which gets executed when press left arrow. It receive a callback to go to the previous month  "),(0,l.kt)("span",{style:{color:"grey"}},"(method: () => void, month?: string) => void"),(0,l.kt)("h3",{id:"onpressarrowright"},"onPressArrowRight"),(0,l.kt)("p",null,"Handler which gets executed when press right arrow. It receive a callback to go to the next month  "),(0,l.kt)("span",{style:{color:"grey"}},"(method: () => void, month?: string) => void"),(0,l.kt)("h3",{id:"disableddaysindexes"},"disabledDaysIndexes"),(0,l.kt)("p",null,"Whether to apply custom disable color to selected day indexes  "),(0,l.kt)("span",{style:{color:"grey"}},"number[]"),(0,l.kt)("h3",{id:"renderheader"},"renderHeader"),(0,l.kt)("p",null,"Replace default title with custom one  "),(0,l.kt)("span",{style:{color:"grey"}},"(date?: string) => ReactNode"),(0,l.kt)("h3",{id:"customheadertitle"},"customHeaderTitle"),(0,l.kt)("p",null,"Replace default title with custom element  "),(0,l.kt)("span",{style:{color:"grey"}},"JSX.Element"),(0,l.kt)("h3",{id:"daycomponent"},"dayComponent"),(0,l.kt)("p",null,"Replace default day with custom day rendering component  "),(0,l.kt)("span",{style:{color:"grey"}},"JSX.Element"),(0,l.kt)("h3",{id:"disablealltoucheventsfordisableddays"},"disableAllTouchEventsForDisabledDays"),(0,l.kt)("p",null,"Whether to disable all touch events for disabled days (can be override with 'disableTouchEvent' in 'markedDates')  "),(0,l.kt)("span",{style:{color:"grey"}},"boolean"),(0,l.kt)("h3",{id:"disablealltoucheventsforinactivedays"},"disableAllTouchEventsForInactiveDays"),(0,l.kt)("p",null,"Whether to disable all touch events for inactive days (can be override with 'disableTouchEvent' in 'markedDates')  "),(0,l.kt)("span",{style:{color:"grey"}},"boolean"),(0,l.kt)("br",null),(0,l.kt)("h2",{id:"calendar-examples"},"Calendar Examples"),(0,l.kt)("br",null),(0,l.kt)("h4",{id:"basic-parameters"},"Basic parameters"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"<Calendar\n  // Initially visible month. Default = now\n  initialDate={'2012-03-01'}\n  // Minimum date that can be selected, dates before minDate will be grayed out. Default = undefined\n  minDate={'2012-05-10'}\n  // Maximum date that can be selected, dates after maxDate will be grayed out. Default = undefined\n  maxDate={'2012-05-30'}\n  // Handler which gets executed on day press. Default = undefined\n  onDayPress={day => {\n    console.log('selected day', day);\n  }}\n  // Handler which gets executed on day long press. Default = undefined\n  onDayLongPress={day => {\n    console.log('selected day', day);\n  }}\n  // Month format in calendar title. Formatting values: http://arshaw.com/xdate/#Formatting\n  monthFormat={'yyyy MM'}\n  // Handler which gets executed when visible month changes in calendar. Default = undefined\n  onMonthChange={month => {\n    console.log('month changed', month);\n  }}\n  // Hide month navigation arrows. Default = false\n  hideArrows={true}\n  // Replace default arrows with custom ones (direction can be 'left' or 'right')\n  renderArrow={direction => <Arrow />}\n  // Do not show days of other months in month page. Default = false\n  hideExtraDays={true}\n  // If hideArrows = false and hideExtraDays = false do not switch month when tapping on greyed out\n  // day from another month that is visible in calendar page. Default = false\n  disableMonthChange={true}\n  // If firstDay=1 week starts from Monday. Note that dayNames and dayNamesShort should still start from Sunday\n  firstDay={1}\n  // Hide day names. Default = false\n  hideDayNames={true}\n  // Show week numbers to the left. Default = false\n  showWeekNumbers={true}\n  // Handler which gets executed when press arrow icon left. It receive a callback can go back month\n  onPressArrowLeft={subtractMonth => subtractMonth()}\n  // Handler which gets executed when press arrow icon right. It receive a callback can go next month\n  onPressArrowRight={addMonth => addMonth()}\n  // Disable left arrow. Default = false\n  disableArrowLeft={true}\n  // Disable right arrow. Default = false\n  disableArrowRight={true}\n  // Disable all touch events for disabled days. can be override with disableTouchEvent in markedDates\n  disableAllTouchEventsForDisabledDays={true}\n  // Replace default month and year title with custom one. the function receive a date as parameter\n  renderHeader={date => {\n    /*Return JSX*/\n  }}\n  // Enable the option to swipe between months. Default = false\n  enableSwipeMonths={true}\n/>\n")),(0,l.kt)("h4",{id:"date-marking"},"Date marking"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Disclaimer"),": Make sure that ",(0,l.kt)("inlineCode",{parentName:"p"},"markedDates")," param is immutable. If you change ",(0,l.kt)("inlineCode",{parentName:"p"},"markedDates")," object content but the reference to it does not change calendar update will not be triggered."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Dot marking"),(0,l.kt)("img",{height:50,src:"https://github.com/wix-private/wix-react-native-calendar/blob/master/demo/assets/marking1.png?raw=true"}))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"<Calendar\n  // Collection of dates that have to be marked. Default = {}\n  markedDates={{\n    '2012-05-16': {selected: true, marked: true, selectedColor: 'blue'},\n    '2012-05-17': {marked: true},\n    '2012-05-18': {marked: true, dotColor: 'red', activeOpacity: 0},\n    '2012-05-19': {disabled: true, disableTouchEvent: true}\n  }}\n/>\n")),(0,l.kt)("p",null,"You can customize a dot color for each day independently."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Multi-Dot marking"),(0,l.kt)("img",{height:50,src:"https://github.com/wix-private/wix-react-native-calendar/blob/master/demo/assets/marking4.png?raw=true"}))),(0,l.kt)("p",null,"Use ",(0,l.kt)("inlineCode",{parentName:"p"},"markingType={'multi-dot'}")," if you want to display more than one dot. Both the ",(0,l.kt)("inlineCode",{parentName:"p"},"<Calendar/>")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"<CalendarList/>")," support multiple dots by using ",(0,l.kt)("inlineCode",{parentName:"p"},"dots")," array in ",(0,l.kt)("inlineCode",{parentName:"p"},"markedDates")," prop.\nThe property ",(0,l.kt)("inlineCode",{parentName:"p"},"color")," is mandatory while ",(0,l.kt)("inlineCode",{parentName:"p"},"key")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"selectedColor")," are optional. If key is omitted then the array index is used as key. If ",(0,l.kt)("inlineCode",{parentName:"p"},"selectedColor")," is omitted then ",(0,l.kt)("inlineCode",{parentName:"p"},"color")," will be used for selected dates."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"const vacation = {key: 'vacation', color: 'red', selectedDotColor: 'blue'};\nconst massage = {key: 'massage', color: 'blue', selectedDotColor: 'blue'};\nconst workout = {key: 'workout', color: 'green'};\n\n<Calendar\n  markingType={'multi-dot'}\n  markedDates={{\n    '2017-10-25': {dots: [vacation, massage, workout], selected: true, selectedColor: 'red'},\n    '2017-10-26': {dots: [massage, workout], disabled: true}\n  }}\n/>;\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Period marking"),(0,l.kt)("img",{height:50,src:"https://github.com/wix-private/wix-react-native-calendar/blob/master/demo/assets/marking2.png?raw=true"}),(0,l.kt)("img",{height:50,src:"https://github.com/wix-private/wix-react-native-calendar/blob/master/demo/assets/marking3.png?raw=true"}))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"<Calendar\n  markingType={'period'}\n  markedDates={{\n    '2012-05-20': {textColor: 'green'},\n    '2012-05-22': {startingDay: true, color: 'green'},\n    '2012-05-23': {selected: true, endingDay: true, color: 'green', textColor: 'gray'},\n    '2012-05-04': {disabled: true, startingDay: true, color: 'green', endingDay: true}\n  }}\n/>\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Multi-period marking"),(0,l.kt)("img",{height:50,src:"https://github.com/wix-private/wix-react-native-calendar/blob/master/demo/assets/marking6.png?raw=true"}))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"CAUTION"),": This marking is only fully supported by the ",(0,l.kt)("inlineCode",{parentName:"p"},"<Calendar/>")," component because it expands its height. Usage with ",(0,l.kt)("inlineCode",{parentName:"p"},"<CalendarList/>")," might lead to overflow issues."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"<Calendar\n  markingType=\"multi-period\"\n  markedDates={{\n    '2017-12-14': {\n      periods: [\n        {startingDay: false, endingDay: true, color: '#5f9ea0'},\n        {startingDay: false, endingDay: true, color: '#ffa500'},\n        {startingDay: true, endingDay: false, color: '#f0e68c'}\n      ]\n    },\n    '2017-12-15': {\n      periods: [\n        {startingDay: true, endingDay: false, color: '#ffa500'},\n        {color: 'transparent'},\n        {startingDay: false, endingDay: false, color: '#f0e68c'}\n      ]\n    }\n  }}\n/>\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Custom marking (allows you to customize each marker with custom styles)"),(0,l.kt)("img",{height:50,src:"https://github.com/wix-private/wix-react-native-calendar/blob/master/demo/assets/marking5.png?raw=true"}))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"<Calendar\n  markingType={'custom'}\n  markedDates={{\n    '2018-03-28': {\n      customStyles: {\n        container: {\n          backgroundColor: 'green'\n        },\n        text: {\n          color: 'black',\n          fontWeight: 'bold'\n        }\n      }\n    },\n    '2018-03-29': {\n      customStyles: {\n        container: {\n          backgroundColor: 'white',\n          elevation: 2\n        },\n        text: {\n          color: 'blue'\n        }\n      }\n    }\n  }}\n/>\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"NEW!")," While we still don't support multi marking type, we add the possibility to combine between ",(0,l.kt)("inlineCode",{parentName:"p"},"period")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"dot"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"<Calendar\n  markingType={'period'}\n  markedDates={{\n    '2012-05-15': {marked: true, dotColor: '#50cebb'},\n    '2012-05-16': {marked: true, dotColor: '#50cebb'},\n    '2012-05-21': {startingDay: true, color: '#50cebb', textColor: 'white'},\n    '2012-05-22': {color: '#70d7c7', textColor: 'white'},\n    '2012-05-23': {color: '#70d7c7', textColor: 'white', marked: true, dotColor: 'white'},\n    '2012-05-24': {color: '#70d7c7', textColor: 'white'},\n    '2012-05-25': {endingDay: true, color: '#50cebb', textColor: 'white'}\n  }}\n/>\n")),(0,l.kt)("img",{height:350,src:"https://github.com/wix-private/wix-react-native-calendar/blob/master/demo/assets/multi-marking.png?raw=true"}),(0,l.kt)("p",null,"Keep in mind that different marking types are not compatible. You can use just one marking style for a calendar."),(0,l.kt)("h4",{id:"displaying-data-loading-indicator"},"Displaying data loading indicator"),(0,l.kt)("img",{height:50,src:"https://github.com/wix-private/wix-react-native-calendar/blob/master/demo/assets/loader.png?raw=true"}),(0,l.kt)("p",null,"The loading indicator next to the month name will be displayed if ",(0,l.kt)("inlineCode",{parentName:"p"},"<Calendar/>")," has ",(0,l.kt)("inlineCode",{parentName:"p"},"displayLoadingIndicator")," prop and the ",(0,l.kt)("inlineCode",{parentName:"p"},"markedDates")," collection does not have a value for every day of the month in question. When you load data for days, just set ",(0,l.kt)("inlineCode",{parentName:"p"},"[]")," or special marking value to all days in ",(0,l.kt)("inlineCode",{parentName:"p"},"markedDates")," collection."),(0,l.kt)("h4",{id:"customizing-look--feel"},"Customizing look & feel"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"<Calendar\n  // Specify style for calendar container element. Default = {}\n  style={{\n    borderWidth: 1,\n    borderColor: 'gray',\n    height: 350\n  }}\n  // Specify theme properties to override specific styles for calendar parts. Default = {}\n  theme={{\n    backgroundColor: '#ffffff',\n    calendarBackground: '#ffffff',\n    textSectionTitleColor: '#b6c1cd',\n    textSectionTitleDisabledColor: '#d9e1e8',\n    selectedDayBackgroundColor: '#00adf5',\n    selectedDayTextColor: '#ffffff',\n    todayTextColor: '#00adf5',\n    dayTextColor: '#2d4150',\n    textDisabledColor: '#d9e1e8',\n    dotColor: '#00adf5',\n    selectedDotColor: '#ffffff',\n    arrowColor: 'orange',\n    disabledArrowColor: '#d9e1e8',\n    monthTextColor: 'blue',\n    indicatorColor: 'blue',\n    textDayFontFamily: 'monospace',\n    textMonthFontFamily: 'monospace',\n    textDayHeaderFontFamily: 'monospace',\n    textDayFontWeight: '300',\n    textMonthFontWeight: 'bold',\n    textDayHeaderFontWeight: '300',\n    textDayFontSize: 16,\n    textMonthFontSize: 16,\n    textDayHeaderFontSize: 16\n  }}\n/>\n")),(0,l.kt)("h4",{id:"customize-days-titles-with-disabled-styling"},"Customize days titles with disabled styling"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"<Calendar\n  theme={{\n    textSectionTitleDisabledColor: '#d9e1e8'\n  }}\n  markedDates={{\n    ...this.getDisabledDates('2012-05-01', '2012-05-30', [0, 6])\n  }}\n  disabledDaysIndexes={[0, 6]}\n/>\n")),(0,l.kt)("h4",{id:"advanced-styling"},"Advanced styling"),(0,l.kt)("p",null,"If you want to have complete control over the calendar styles you can do it by overriding default ",(0,l.kt)("inlineCode",{parentName:"p"},"style.ts")," files. For example, if you want to override ",(0,l.kt)("inlineCode",{parentName:"p"},"<CalendarHeader/>")," style first you have to find stylesheet id for this file:"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/wix/react-native-calendars/blob/master/src/calendar/header/style.ts#L60"},"https://github.com/wix/react-native-calendars/blob/master/src/calendar/header/style.ts#L60")),(0,l.kt)("p",null,"In this case it is ",(0,l.kt)("inlineCode",{parentName:"p"},"stylesheet.calendar.header"),". Next you can add overriding stylesheet to your theme with this id."),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/wix/react-native-calendars/blob/master/example/src/screens/calendars.tsx#L142"},"https://github.com/wix/react-native-calendars/blob/master/example/src/screens/calendars.tsx#L142")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"theme={{\n  arrowColor: 'white',\n  'stylesheet.calendar.header': {\n    week: {\n      marginTop: 5,\n      flexDirection: 'row',\n      justifyContent: 'space-between'\n    }\n  }\n}}\n")),(0,l.kt)("h4",{id:"individual-day-header-styling"},"Individual day header styling"),(0,l.kt)("p",null,"Using the above advanced styling, it is possible to set styles independently for each day's header. If we wanted to make the header for Sunday red, and Saturday blue, we could write something like the following:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"theme={{\n  'stylesheet.calendar.header': {\n    dayTextAtIndex0: {\n      color: 'red'\n    },\n    dayTextAtIndex6: {\n      color: 'blue'\n    }\n  }\n}}\n")),(0,l.kt)("img",{height:50,src:"https://github.com/wix-private/wix-react-native-calendar/blob/master/demo/assets/day-header-style.png?raw=true"}),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Disclaimer"),": Issues that arise because something breaks after using stylesheet override will not be supported. Use this option at your own risk."),(0,l.kt)("h4",{id:"overriding-day-component"},"Overriding day component"),(0,l.kt)("p",null,"If you need custom functionality not supported by current day component implementations you can pass your own custom day component to the calendar."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"<Calendar\n  style={[styles.calendar, {height: 300}]}\n  dayComponent={({date, state}) => {\n    return (\n      <View>\n        <Text style={{textAlign: 'center', color: state === 'disabled' ? 'gray' : 'black'}}>{date.day}</Text>\n      </View>\n    );\n  }}\n/>\n")),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"dayComponent")," prop has to receive a RN component or a function that receive props. The ",(0,l.kt)("inlineCode",{parentName:"p"},"dayComponent")," will receive such props:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"state - disabled if the day should be disabled (this is decided by base calendar component)."),(0,l.kt)("li",{parentName:"ul"},"marking - ",(0,l.kt)("inlineCode",{parentName:"li"},"markedDates")," value for this day."),(0,l.kt)("li",{parentName:"ul"},"date - the date object representing this day.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Tip"),": Don't forget to implement ",(0,l.kt)("inlineCode",{parentName:"p"},"shouldComponentUpdate()")," for your custom day component to make the calendar perform better"),(0,l.kt)("p",null,"If you implement an awesome day component please make a PR so that other people could use it :)"))}p.isMDXComponent=!0}}]);