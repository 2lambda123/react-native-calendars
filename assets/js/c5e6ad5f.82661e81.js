"use strict";(self.webpackChunkdocs_rnc=self.webpackChunkdocs_rnc||[]).push([[308],{3905:function(e,t,a){a.d(t,{Zo:function(){return c},kt:function(){return u}});var l=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function n(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);t&&(l=l.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,l)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?n(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):n(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,l,r=function(e,t){if(null==e)return{};var a,l,r={},n=Object.keys(e);for(l=0;l<n.length;l++)a=n[l],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(l=0;l<n.length;l++)a=n[l],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=l.createContext({}),d=function(e){var t=l.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},c=function(e){var t=d(e.components);return l.createElement(s.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return l.createElement(l.Fragment,{},t)}},p=l.forwardRef((function(e,t){var a=e.components,r=e.mdxType,n=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),p=d(a),u=r,y=p["".concat(s,".").concat(u)]||p[u]||h[u]||n;return a?l.createElement(y,o(o({ref:t},c),{},{components:a})):l.createElement(y,o({ref:t},c))}));function u(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var n=a.length,o=new Array(n);o[0]=p;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var d=2;d<n;d++)o[d]=a[d];return l.createElement.apply(null,o)}return l.createElement.apply(null,a)}p.displayName="MDXCreateElement"},9831:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return i},contentTitle:function(){return s},metadata:function(){return d},toc:function(){return c},default:function(){return p}});var l=a(7462),r=a(3366),n=(a(7294),a(3905)),o=["components"],i={},s=void 0,d={unversionedId:"Calendar",id:"Calendar",title:"Calendar",description:"Calendar component",source:"@site/docs/Calendar.md",sourceDirName:".",slug:"/Calendar",permalink:"/react-native-calendars/docs/Calendar",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Calendar.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"AgendaList",permalink:"/react-native-calendars/docs/AgendaList"},next:{title:"CalendarList",permalink:"/react-native-calendars/docs/CalendarList"}},c=[{value:"API",id:"api",children:[{value:"theme",id:"theme",children:[],level:3},{value:"style",id:"style",children:[],level:3},{value:"headerStyle",id:"headerstyle",children:[],level:3},{value:"customHeader",id:"customheader",children:[],level:3},{value:"initialDate",id:"initialdate",children:[],level:3},{value:"minDate",id:"mindate",children:[],level:3},{value:"maxDate",id:"maxdate",children:[],level:3},{value:"firstDay",id:"firstday",children:[],level:3},{value:"markedDates",id:"markeddates",children:[],level:3},{value:"displayLoadingIndicator",id:"displayloadingindicator",children:[],level:3},{value:"showWeekNumbers",id:"showweeknumbers",children:[],level:3},{value:"hideExtraDays",id:"hideextradays",children:[],level:3},{value:"showSixWeeks",id:"showsixweeks",children:[],level:3},{value:"disableMonthChange",id:"disablemonthchange",children:[],level:3},{value:"enableSwipeMonths",id:"enableswipemonths",children:[],level:3},{value:"disabledByDefault",id:"disabledbydefault",children:[],level:3},{value:"allowSelectionOutOfRange",id:"allowselectionoutofrange",children:[],level:3},{value:"onDayPress",id:"ondaypress",children:[],level:3},{value:"onDayLongPress",id:"ondaylongpress",children:[],level:3},{value:"onMonthChange",id:"onmonthchange",children:[],level:3},{value:"onVisibleMonthsChange",id:"onvisiblemonthschange",children:[],level:3},{value:"monthFormat",id:"monthformat",children:[],level:3},{value:"hideDayNames",id:"hidedaynames",children:[],level:3},{value:"hideArrows",id:"hidearrows",children:[],level:3},{value:"disableArrowLeft",id:"disablearrowleft",children:[],level:3},{value:"disableArrowRight",id:"disablearrowright",children:[],level:3},{value:"renderArrow",id:"renderarrow",children:[],level:3},{value:"onPressArrowLeft",id:"onpressarrowleft",children:[],level:3},{value:"onPressArrowRight",id:"onpressarrowright",children:[],level:3},{value:"disabledDaysIndexes",id:"disableddaysindexes",children:[],level:3},{value:"renderHeader",id:"renderheader",children:[],level:3},{value:"customHeaderTitle",id:"customheadertitle",children:[],level:3},{value:"dayComponent",id:"daycomponent",children:[],level:3},{value:"disableAllTouchEventsForDisabledDays",id:"disablealltoucheventsfordisableddays",children:[],level:3},{value:"disableAllTouchEventsForInactiveDays",id:"disablealltoucheventsforinactivedays",children:[],level:3}],level:2}],h={toc:c};function p(e){var t=e.components,a=(0,r.Z)(e,o);return(0,n.kt)("wrapper",(0,l.Z)({},h,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"Calendar component",(0,n.kt)("br",{parentName:"p"}),"\n",(0,n.kt)("a",{parentName:"p",href:"https://github.com/wix/react-native-calendars/blob/master/example/src/screens/calendars.tsx"},"(code example)")),(0,n.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,n.kt)("div",{parentName:"div",className:"admonition-heading"},(0,n.kt)("h5",{parentName:"div"},(0,n.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,n.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,n.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,n.kt)("div",{parentName:"div",className:"admonition-content"},(0,n.kt)("p",{parentName:"div"},"This component extends ",(0,n.kt)("strong",{parentName:"p"},(0,n.kt)("a",{parentName:"strong",href:"https://github.com/wix/react-native-calendars/blob/master/src/calendar/header/index.tsx,https://github.com/wix/react-native-calendars/blob/master/src/calendar/day/basic/index.tsx"},"CalendarHeader, BasicDay"))," props."))),(0,n.kt)("div",{style:{display:"flex",flexDirection:"row",overflowX:"auto",maxHeight:"500px",alignItems:"center"}},(0,n.kt)("img",{style:{maxHeight:"420px"},src:"https://github.com/wix/react-native-calendars/blob/master/demo/assets/calendar.gif?raw=true"})),(0,n.kt)("h2",{id:"api"},"API"),(0,n.kt)("h3",{id:"theme"},"theme"),(0,n.kt)("p",null,"Specify theme properties to override specific styles for calendar parts  "),(0,n.kt)("span",{style:{color:"grey"}},"Theme"),(0,n.kt)("h3",{id:"style"},"style"),(0,n.kt)("p",null,"Specify style for calendar container element  "),(0,n.kt)("span",{style:{color:"grey"}},"ViewStyle"),(0,n.kt)("h3",{id:"headerstyle"},"headerStyle"),(0,n.kt)("p",null,"Specify style for calendar header  "),(0,n.kt)("span",{style:{color:"grey"}},"ViewStyle"),(0,n.kt)("h3",{id:"customheader"},"customHeader"),(0,n.kt)("p",null,"Allow rendering a totally custom header  "),(0,n.kt)("span",{style:{color:"grey"}},"any"),(0,n.kt)("h3",{id:"initialdate"},"initialDate"),(0,n.kt)("p",null,"Initially visible month  "),(0,n.kt)("span",{style:{color:"grey"}},"string"),(0,n.kt)("h3",{id:"mindate"},"minDate"),(0,n.kt)("p",null,"Minimum date that can be selected, dates before minDate will be grayed out  "),(0,n.kt)("span",{style:{color:"grey"}},"string"),(0,n.kt)("h3",{id:"maxdate"},"maxDate"),(0,n.kt)("p",null,"Maximum date that can be selected, dates after maxDate will be grayed out  "),(0,n.kt)("span",{style:{color:"grey"}},"string"),(0,n.kt)("h3",{id:"firstday"},"firstDay"),(0,n.kt)("p",null,"If firstDay=1 week starts from Monday. Note that dayNames and dayNamesShort should still start from Sunday  "),(0,n.kt)("span",{style:{color:"grey"}},"number"),(0,n.kt)("h3",{id:"markeddates"},"markedDates"),(0,n.kt)("p",null,"Collection of dates that have to be marked  "),(0,n.kt)("span",{style:{color:"grey"}},"MarkedDatesType"),(0,n.kt)("h3",{id:"displayloadingindicator"},"displayLoadingIndicator"),(0,n.kt)("p",null,"Whether to display loading indicator  "),(0,n.kt)("span",{style:{color:"grey"}},"boolean"),(0,n.kt)("h3",{id:"showweeknumbers"},"showWeekNumbers"),(0,n.kt)("p",null,"Whether to show weeks numbers  "),(0,n.kt)("span",{style:{color:"grey"}},"boolean"),(0,n.kt)("h3",{id:"hideextradays"},"hideExtraDays"),(0,n.kt)("p",null,"Whether to hide days of other months in the month page  "),(0,n.kt)("span",{style:{color:"grey"}},"boolean"),(0,n.kt)("h3",{id:"showsixweeks"},"showSixWeeks"),(0,n.kt)("p",null,"Whether to always show six weeks on each month (when hideExtraDays = false)  "),(0,n.kt)("span",{style:{color:"grey"}},"boolean"),(0,n.kt)("h3",{id:"disablemonthchange"},"disableMonthChange"),(0,n.kt)("p",null,"Whether to disable changing month when click on days of other months (when hideExtraDays is false)  "),(0,n.kt)("span",{style:{color:"grey"}},"boolean"),(0,n.kt)("h3",{id:"enableswipemonths"},"enableSwipeMonths"),(0,n.kt)("p",null,"Whether to enable the option to swipe between months  "),(0,n.kt)("span",{style:{color:"grey"}},"boolean"),(0,n.kt)("h3",{id:"disabledbydefault"},"disabledByDefault"),(0,n.kt)("p",null,"Whether to disable days by default  "),(0,n.kt)("span",{style:{color:"grey"}},"boolean"),(0,n.kt)("h3",{id:"allowselectionoutofrange"},"allowSelectionOutOfRange"),(0,n.kt)("p",null,"Whether to allow selection of dates before minDate or after maxDate  "),(0,n.kt)("span",{style:{color:"grey"}},"boolean"),(0,n.kt)("h3",{id:"ondaypress"},"onDayPress"),(0,n.kt)("p",null,"Handler which gets executed on day press  "),(0,n.kt)("span",{style:{color:"grey"}},"(date: DateData) => void"),(0,n.kt)("h3",{id:"ondaylongpress"},"onDayLongPress"),(0,n.kt)("p",null,"Handler which gets executed on day long press  "),(0,n.kt)("span",{style:{color:"grey"}},"(date: DateData) => void"),(0,n.kt)("h3",{id:"onmonthchange"},"onMonthChange"),(0,n.kt)("p",null,"Handler which gets executed when month changes in calendar  "),(0,n.kt)("span",{style:{color:"grey"}},"(date: DateData) => void"),(0,n.kt)("h3",{id:"onvisiblemonthschange"},"onVisibleMonthsChange"),(0,n.kt)("p",null,"Handler which gets executed when visible month changes in calendar  "),(0,n.kt)("span",{style:{color:"grey"}},"(months: DateData[]) => void"),(0,n.kt)("h3",{id:"monthformat"},"monthFormat"),(0,n.kt)("p",null,"Month format for the header's title. Formatting values: ",(0,n.kt)("a",{parentName:"p",href:"http://arshaw.com/xdate/#Formatting"},"http://arshaw.com/xdate/#Formatting"),"  "),(0,n.kt)("span",{style:{color:"grey"}},"string"),(0,n.kt)("h3",{id:"hidedaynames"},"hideDayNames"),(0,n.kt)("p",null,"Whether to hide the days names  "),(0,n.kt)("span",{style:{color:"grey"}},"boolean"),(0,n.kt)("h3",{id:"hidearrows"},"hideArrows"),(0,n.kt)("p",null,"Whether to hide the arrows  "),(0,n.kt)("span",{style:{color:"grey"}},"boolean"),(0,n.kt)("h3",{id:"disablearrowleft"},"disableArrowLeft"),(0,n.kt)("p",null,"Whether to disable the left arrow  "),(0,n.kt)("span",{style:{color:"grey"}},"boolean"),(0,n.kt)("h3",{id:"disablearrowright"},"disableArrowRight"),(0,n.kt)("p",null,"Whether to disable the right arrow  "),(0,n.kt)("span",{style:{color:"grey"}},"boolean"),(0,n.kt)("h3",{id:"renderarrow"},"renderArrow"),(0,n.kt)("p",null,"Replace default arrows with custom ones (direction: 'left' | 'right')  "),(0,n.kt)("span",{style:{color:"grey"}},"(direction: Direction) => ReactNode"),(0,n.kt)("h3",{id:"onpressarrowleft"},"onPressArrowLeft"),(0,n.kt)("p",null,"Handler which gets executed when press left arrow. It receive a callback to go to the previous month  "),(0,n.kt)("span",{style:{color:"grey"}},"(method: () => void, month?: string) => void"),(0,n.kt)("h3",{id:"onpressarrowright"},"onPressArrowRight"),(0,n.kt)("p",null,"Handler which gets executed when press right arrow. It receive a callback to go to the next month  "),(0,n.kt)("span",{style:{color:"grey"}},"(method: () => void, month?: string) => void"),(0,n.kt)("h3",{id:"disableddaysindexes"},"disabledDaysIndexes"),(0,n.kt)("p",null,"Whether to apply custom disable color to selected day indexes  "),(0,n.kt)("span",{style:{color:"grey"}},"number[]"),(0,n.kt)("h3",{id:"renderheader"},"renderHeader"),(0,n.kt)("p",null,"Replace default title with custom one  "),(0,n.kt)("span",{style:{color:"grey"}},"(date?: string) => ReactNode"),(0,n.kt)("h3",{id:"customheadertitle"},"customHeaderTitle"),(0,n.kt)("p",null,"Replace default title with custom element  "),(0,n.kt)("span",{style:{color:"grey"}},"JSX.Element"),(0,n.kt)("h3",{id:"daycomponent"},"dayComponent"),(0,n.kt)("p",null,"Replace default day with custom day rendering component  "),(0,n.kt)("span",{style:{color:"grey"}},"JSX.Element"),(0,n.kt)("h3",{id:"disablealltoucheventsfordisableddays"},"disableAllTouchEventsForDisabledDays"),(0,n.kt)("p",null,"Whether to disable all touch events for disabled days (can be override with 'disableTouchEvent' in 'markedDates')  "),(0,n.kt)("span",{style:{color:"grey"}},"boolean"),(0,n.kt)("h3",{id:"disablealltoucheventsforinactivedays"},"disableAllTouchEventsForInactiveDays"),(0,n.kt)("p",null,"Whether to disable all touch events for inactive days (can be override with 'disableTouchEvent' in 'markedDates')  "),(0,n.kt)("span",{style:{color:"grey"}},"boolean"))}p.isMDXComponent=!0}}]);