"use strict";(self.webpackChunkdocs_rnc=self.webpackChunkdocs_rnc||[]).push([[552],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return h}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var d=a.createContext({}),s=function(e){var t=a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=s(e.components);return a.createElement(d.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,d=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=s(n),h=r,m=u["".concat(d,".").concat(h)]||u[h]||p[h]||o;return n?a.createElement(m,l(l({ref:t},c),{},{components:n})):a.createElement(m,l({ref:t},c))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=u;var i={};for(var d in t)hasOwnProperty.call(t,d)&&(i[d]=t[d]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var s=2;s<o;s++)l[s]=n[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},3568:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return d},metadata:function(){return s},toc:function(){return c},default:function(){return u}});var a=n(7462),r=n(3366),o=(n(7294),n(3905)),l=["components"],i={},d=void 0,s={unversionedId:"Agenda",id:"Agenda",title:"Agenda",description:"Agenda component",source:"@site/docs/Agenda.md",sourceDirName:".",slug:"/Agenda",permalink:"/react-native-calendars/docs/Agenda",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Agenda.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"React Native Calendars",permalink:"/react-native-calendars/docs/intro"},next:{title:"AgendaList",permalink:"/react-native-calendars/docs/AgendaList"}},c=[{value:"API",id:"api",children:[{value:"items",id:"items",children:[],level:3},{value:"loadItemsForMonth",id:"loaditemsformonth",children:[],level:3},{value:"onDayChange",id:"ondaychange",children:[],level:3},{value:"onCalendarToggled",id:"oncalendartoggled",children:[],level:3},{value:"selected",id:"selected",children:[],level:3},{value:"renderKnob",id:"renderknob",children:[],level:3},{value:"hideKnob",id:"hideknob",children:[],level:3},{value:"showClosingKnob",id:"showclosingknob",children:[],level:3},{value:"showOnlySelectedDayItems",id:"showonlyselecteddayitems",children:[],level:3},{value:"renderEmptyData",id:"renderemptydata",children:[],level:3}],level:2}],p={toc:c};function u(e){var t=e.components,n=(0,r.Z)(e,l);return(0,o.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Agenda component",(0,o.kt)("br",{parentName:"p"}),"\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/wix/react-native-calendars/blob/master/example/src/screens/agenda.tsx"},"(code example)")),(0,o.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"This component extends ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"https://github.com/wix/react-native-calendars/blob/master/src/calendar-list/index.tsx,https://reactnative.dev/docs/flatlist"},"CalendarList, FlatList"))," props."))),(0,o.kt)("div",{style:{display:"flex",flexDirection:"row",overflowX:"auto",maxHeight:"500px",alignItems:"center"}},(0,o.kt)("img",{style:{maxHeight:"420px"},src:"https://github.com/wix/react-native-calendars/blob/master/demo/assets/agenda.gif?raw=true"})),(0,o.kt)("h2",{id:"api"},"API"),(0,o.kt)("h3",{id:"items"},"items"),(0,o.kt)("p",null,"the list of items that have to be displayed in agenda. If you want to render item as empty date the value of date key has to be an empty array []. If there exists no value for date key it is considered that the date in question is not yet loaded  "),(0,o.kt)("span",{style:{color:"grey"}},"AgendaSchedule"),(0,o.kt)("h3",{id:"loaditemsformonth"},"loadItemsForMonth"),(0,o.kt)("p",null,"Handler which gets executed when items for a certain month should be loaded (month became visible)  "),(0,o.kt)("span",{style:{color:"grey"}},"(data: DateData) => void"),(0,o.kt)("h3",{id:"ondaychange"},"onDayChange"),(0,o.kt)("p",null,"Handler which gets executed when day changes while scrolling agenda list  "),(0,o.kt)("span",{style:{color:"grey"}},"(data: DateData) => void"),(0,o.kt)("h3",{id:"oncalendartoggled"},"onCalendarToggled"),(0,o.kt)("p",null,"Handler which gets executed when the calendar is opened or closed  "),(0,o.kt)("span",{style:{color:"grey"}},"(enabled: boolean) => void"),(0,o.kt)("h3",{id:"selected"},"selected"),(0,o.kt)("p",null,"initially selected day  "),(0,o.kt)("span",{style:{color:"grey"}},"string"),(0,o.kt)("h3",{id:"renderknob"},"renderKnob"),(0,o.kt)("p",null,"Replace default agenda's knob with a custom one  "),(0,o.kt)("span",{style:{color:"grey"}},"() => JSX.Element"),(0,o.kt)("h3",{id:"hideknob"},"hideKnob"),(0,o.kt)("p",null,"Whether to hide the knob  "),(0,o.kt)("span",{style:{color:"grey"}},"boolean"),(0,o.kt)("h3",{id:"showclosingknob"},"showClosingKnob"),(0,o.kt)("p",null,"Whether the knob should always be visible (when hideKnob = false)  "),(0,o.kt)("span",{style:{color:"grey"}},"boolean"),(0,o.kt)("h3",{id:"showonlyselecteddayitems"},"showOnlySelectedDayItems"),(0,o.kt)("p",null,"Whether to show items only for the selected date  "),(0,o.kt)("span",{style:{color:"grey"}},"boolean"),(0,o.kt)("h3",{id:"renderemptydata"},"renderEmptyData"),(0,o.kt)("p",null,"Replace default ActivityIndicator with a custom one  "),(0,o.kt)("span",{style:{color:"grey"}},"() => JSX.Element"))}u.isMDXComponent=!0}}]);